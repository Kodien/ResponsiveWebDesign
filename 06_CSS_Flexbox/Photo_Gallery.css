* {
    /* The * selector selects all elements in the page */
    box-sizing: border-box;
    /* The box sizing property sets what size is modified when you set the size */
    /* In this case, when you set the width of the element to 200px, the total width of the element is 200px including the padding and border */
}

body {
  margin: 0;
  font-family: sans-serif;
  background: #f5f6f7;
}

.header {
  text-align: center;
  text-transform: uppercase;
  /* The text-transform property transforms the text, this in specific will make all the characters in uppercase */
  padding: 32px;
  background-color: #0a0a23;
  color: #fff;
  border-bottom: 4px solid #fdb347;
}

.gallery img {
  width: 100%;
  max-width: 350px;
  height: 300px;
  object-fit: cover;
  /* The object-fit property controls how images should behave */
  /* Setting it to cover will fill the img container while maintaining its aspect ratio, resulting in a crop */
}

/* Flexbox is a one-dimensional CSS layout that can control how elements are spaced and aligned with each other in a container */
.gallery {
  display: flex;
  /* To use it, we need to give a container this property to make it a flex container */
  /* Any children the container has is called a flex item */
  flex-direction: row;
  /* A flex direction has 4 possible values, row, row-reverse, column, and column-reverse */
  /* The flex-direction property defines the main axis of a flexbox, whixh also has a cross axis */
  flex-wrap: wrap;
  /* The flex-wrap property determines how your elements behave when their container is too small */
  /* If wrap, they will wrap to the next row or column, if nowrap, the browser will prevent your elements from wrapping and shrink them if needed */
  justify-content: center;
  /* The justify-content property determines how your items are aligned along the main axis, it also controls the spacing between elements */
  align-items: center;
  /* The align-items property positions the flex content along the cross axis */
  /* With your flex-direction set to row, your cross axis would be vertical */
  gap: 16px;
  /* The gap property sets the gaps between rows and columns */ 
  /* This applies to flex, grid, and multi-column layout by applying the property to the container */
}

.gallery::after {
  /* The after pseudo-element creates an empty element as the last child of the container */
  /* It can be used to move the last image to the left in a 2 column layout by setting its width to the same width as the images */
  content: "";
  width: 350px;
}

